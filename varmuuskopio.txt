
var express = require("express");
var app = express();
require("dotenv").config(); //otetaan .env käyttöön salasanoja ja käyttäjätunnuksia varten
app.set('view engine', 'ejs'); // ejs-sivupohjien käyttöönotto
var mongoose = require("mongoose"); // otetaan mongoose käyttöön
var bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({ extended: true }));

const Coffeeshop = require("./modules/model"); //Skeema on määritelty kansioon /modules, se haetaan käyttöön tällä rivillä. 

var user = process.env.DB_USER
var password = process.env.DB_PASS
const uri = "mongodb+srv://" + user + ":" + password + "@cluster0.1z6n89r.mongodb.net/coffeeshopData?retryWrites=true&w=majority";

/* async function connect(){ //yhteydenotto MongoDB:een tietokantaan async -funktiolla
    try{
        await mongoose.connect(uri);
        console.log('connected');
    } catch(error){
        console.log(error)
    }
}
connect(); */

const client = mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });

app.get('/', (req, res) => {
    res.render('index', { title: 'My Website', heading: 'Welcome' });
});


app.get('/getall', async (req, res) => { //Return all documents in collection
    try {
      const items = await Coffeeshop.find({});
      res.status(200).json(items);
    } catch (error) {
      console.log(error);
    }
  }); 

  app.get('/getall/menu', async (req, res) => {
    try {
      const items = await Coffeeshop.find({});
      res.render('items', { items });
    } catch (error) {
      console.log(error);
    }
  });
  
  

app.get('/items/:id', async (req, res) => { //Return one item with the given id
    var itemId = req.params.id;

    try {
        const kahvi = await Coffeeshop.findById(itemId);
        res.status(200).json(kahvi);
    } catch (error) {
        console.log(error);
    }
});
 
/* app.post('/add', async (req, res) => {
    const newItem = new Coffeeshop({
      name: req.body.name,
      description: req.body.description,
      price: req.body.price,
      type: req.body.type
    });
    
    try {
      const result = await Coffeeshop.create(newItem);
      res.status(200).json(result);
    } catch (error) {
      console.log(error);
      res.status(500).json({ message: 'Error adding item' });
    }
  }); */

  app.post('/addnew', async (req, res) => {
    const { name, description, price, type } = req.body;
  
    const newCoffeeshop = new Coffeeshop({
      name,
      description,
      price,
      type
    });
  
    try {
      await newCoffeeshop.save();
      res.status(201).json({ message: 'Coffeeshop created successfully' });
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  });
  

/*   const newItem = new Coffeeshop({
    name: 'Latte plus +',
    description: 'A classic coffee drink made with espresso and steamed oatmilk',
    price: 3.99,
    type: 'coffee',
  }); 
  
    newItem.save()
        .then(item => {
        console.log('Item saved:', item);
        })
        .catch(error => {
        console.error(error);
        });
   
        app.put('/update/:id', async (req, res) =>{
            const id = req.params.id;
        
            Coffeeshop.findByIdAndUpdate(id, {
                name: 'New Name',
                description: 'New Description',
                price: 10.99,
                type: 'new-type'
            }, { new: true })
            .then(updatedItem => {
                console.log('Item updated:', updatedItem);
                res.status(200).json(updatedItem);
            })
            .catch(error => {
                console.error(error);
                res.status(500).json({error: 'Could not update item'});
            });
        });
        */
//------------------------- serveri --------------------------
app.listen(3000, () => {
    console.log('Server listening on port 3000');
});


//--------------------- muita -------------------------------

/* async function connect(){ //yhteydenotto MongoDB:een tietokantaan async -funktiolla
    try{
        await mongoose.connect(uri);
        console.log('connected');
    } catch(error){
        console.log(error)
    }
}
connect(); */

/* const client = mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true }); */

//----------------------------------------------------------

/* app.post('/add', async (req, res) => {
    const newItem = new Coffeeshop({
      name: req.body.name,
      description: req.body.description,
      price: req.body.price,
      type: req.body.type
    });
    
    try {
      const result = await Coffeeshop.create(newItem);
      res.status(200).json(result);
    } catch (error) {
      console.log(error);
      res.status(500).json({ message: 'Error adding item' });
    }
  }); */